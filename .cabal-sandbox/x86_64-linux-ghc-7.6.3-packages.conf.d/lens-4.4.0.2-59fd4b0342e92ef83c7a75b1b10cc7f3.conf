name: lens
version: 4.4.0.2
id: lens-4.4.0.2-59fd4b0342e92ef83c7a75b1b10cc7f3
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Codec.Compression.Zlib.Lens Control.Exception.Lens
                 Control.Lens Control.Lens.Action Control.Lens.At
                 Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
                 Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.Internal Control.Lens.Internal.Action
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
                 Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/user/personal_projects/test_textmewhen_haskell/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.4.0.2
library-dirs: /home/user/personal_projects/test_textmewhen_haskell/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/lens-4.4.0.2
hs-libraries: HSlens-4.4.0.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         bifunctors-4.2-a70ae849f4f3855103e48b244a222ae1
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         comonad-4.2.2-050784165ce4a8aacb2da922e4d10c8a
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-1.2-d4782bfbc22f83428fd689d2b4496c89
         distributive-0.4.4-84364027921244b10d15bd3a60c9f243
         exceptions-0.6.1-e6ad9e3a48aa5018d6f93f4ee11dc9b5
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         free-4.9-08bd1b25ca3850057608b340b84c503a
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.1.0-7e83190fbb1b0ba81d7022fa876f0f8b
         mtl-2.2.1-eda0a12427f66d975ce72a312c95b37a
         parallel-3.2.0.4-6b28f3e9db87f9045e4a465cbf1af2ba
         primitive-0.5.0.1-8e5f40b409f7bb31ae1acfb125279700
         profunctors-4.3.2-04d8b3bc438a28a111d072dc40fb3dda
         reflection-1.5.1-2d21bfdc1e5fe01e6838b9fd04530f2d
         semigroupoids-4.2-89c26cc6c8da1cbb49575d747c195a6a
         semigroups-0.15.4-6495ec73883a4109ffbffdec604d6506
         split-0.2.2-9ce33138f4fcfb9c37f6e6c300bcc367
         tagged-0.7.3-3f6aed0baf49c10a1baa1ef5c4f742b1
         template-haskell-2.8.0.0-a3012803fde1dc362e555b35a1a78e6d
         text-0.11.3.1-e38859e86485c167fa7c9441789e7607
         transformers-0.4.2.0-11877ba51db70c308dd2da4336ebf6a4
         transformers-compat-0.3.3.4-dcef4e1eeab8de73981ca7a7147f19d8
         unordered-containers-0.2.5.0-11c50452e1ec4de862c3ca415f189512
         vector-0.10.0.1-1fbb548bc492f07fef7e604d2e6f581d
         void-0.6.1-a4463ac98e285bc5b93ea7265dd7c899
         zlib-0.5.4.1-13ba81ac0d7e6f3bdf1ee5ddce4e9aab
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/user/personal_projects/test_textmewhen_haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.4.0.2/html/lens.haddock
haddock-html: /home/user/personal_projects/test_textmewhen_haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/lens-4.4.0.2/html
